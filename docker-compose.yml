# Docker Compose configuration for Livestock Monitoring System
# Production-ready PostgreSQL with TimescaleDB and Redis setup

services:
  # PostgreSQL with TimescaleDB extension for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: livestock_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: livestock_monitoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      # TimescaleDB specific configurations
      TIMESCALEDB_TELEMETRY: off
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d livestock_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - livestock_network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: livestock_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - livestock_network

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: livestock_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: livestock_monitoring
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_POOL_SIZE: 20
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      # Rate limiting configuration
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - livestock_network

  # Web Dashboard
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-production
    container_name: livestock_web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_BASE_URL: http://api:3001
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - livestock_network

  # Data import utility (run once to import CSV data)
  data-importer:
    build:
      context: .
      dockerfile: Dockerfile
      target: data-importer
    container_name: livestock_data_importer
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: livestock_monitoring
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - ./data:/app/data:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - livestock_network
    profiles:
      - import # Only run with --profile import

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  livestock_network:
    driver: bridge

# Production monitoring and logging (optional)
# Uncomment for production deployment with monitoring
#
# services:
#   # Prometheus for metrics collection
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: livestock_prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#     networks:
#       - livestock_network
#
#   # Grafana for metrics visualization
#   grafana:
#     image: grafana/grafana:latest
#     container_name: livestock_grafana
#     ports:
#       - "3001:3000"
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#     volumes:
#       - grafana_data:/var/lib/grafana
#     networks:
#       - livestock_network
